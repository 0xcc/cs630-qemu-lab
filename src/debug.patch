diff --git a/.gdbinit b/.gdbinit
index f1b0757..ca87c9e 100644
--- a/.gdbinit
+++ b/.gdbinit
@@ -1,8 +1,5 @@
 target remote :1234
-b main
-b ReadSector
-c
-l
+b start
 c
 l
 bt
diff --git a/Makefile b/Makefile
index 3f6c0cd..11ce23c 100644
--- a/Makefile
+++ b/Makefile
@@ -1,13 +1,12 @@
 AS        = as -g --32
-#LD        = ld -melf_i386
-LD        = ld -r -melf_i386
+LD        = ld -melf_i386
 CC        = gcc -g -m32 -fno-builtin -fno-stack-protector -fomit-frame-pointer -fstrength-reduce
 OBJCOPY   = objcopy
 
 MEM      ?= 129M
 BOOT_ENTRY= main
 LOAD_ENTRY= start
-LOAD_ADDR = 0x1000
+LOAD_ADDR = 0x7C00
 BOOT_ADDR = 0x7C00
 _LOAD_ADDR= 0x07C0
 
@@ -23,18 +22,15 @@ CS630     = http://www.cs.usfca.edu/~cruse/cs630f06/
 all: clean boot.img
 
 boot.img: boot.bin quickload.bin
-	@dd if=quickload.bin of=$(IMAGE) bs=512 count=1
-	@dd if=boot.bin of=$(IMAGE) seek=1 bs=512 count=2879
+	@dd if=boot.bin of=$(IMAGE) bs=512 count=2879
 
 config: $(DEF_SRC) $(SRC)
 	@if [ ! -f $(TOP_DIR)/boot.S ]; then $(CONFIGURE) $(DEF_SRC); fi
 	@$(if $(SRC), $(CONFIGURE) $(SRC))
 
 boot.bin: config
-	@sed -i -e "s%$(_LOAD_ADDR)%$(LOAD_ADDR)%g" boot.S
 	@$(AS) -o boot.o boot.S
-	#@$(LD) boot.o -o boot.elf -Ttext 0 #-e $(LOAD_ENTRY)
-	@$(LD) boot.o -o boot.elf #-Ttext 0 #-e $(LOAD_ENTRY)
+	@$(LD) boot.o -o boot.elf -Ttext $(LOAD_ADDR) -e $(LOAD_ENTRY)
 	@$(OBJCOPY) -R .pdr -R .comment -R.note -S -O binary boot.elf boot.bin
 
 quickload.bin:
diff --git a/src/helloworld.s b/src/helloworld.s
index bc0b040..e8ab91e 100644
--- a/src/helloworld.s
+++ b/src/helloworld.s
@@ -1,7 +1,8 @@
-	.equ   seg_code, 0x07C0	# 结合ljmp, 指定代码的加载位置，当然，也可以在外面指定
+	.global start
+#	.equ   seg_code, 0x07C0	# 结合ljmp, 指定代码的加载位置，当然，也可以在外面指定
 .code16          		#使用16位模式汇编(GAS 默认认为 .S 文件是 pure 32-bits i386 code)
 .text            		#代码段开始(为 link script 做定位)
-	ljmp   $seg_code, $start
+#	ljmp   $seg_code, $start
 start:
         mov    %cs, %ax
         mov    %ax, %ds
diff --git a/src/rtc.s b/src/rtc.s
index b48314c..06f66c7 100644
--- a/src/rtc.s
+++ b/src/rtc.s
@@ -1,7 +1,9 @@
-	.equ   seg_code, 0x07C0
+	.global start
+#	.equ   seg_code, 0x07C0
 .code16			#使用16位模式汇编(GAS 默认认为 .S 文件是 pure 32-bits i386 code)
 .text			#代码段开始(为 link script 做定位)
-	ljmp   $seg_code, $start
+	jmp    start
+#	ljmp   $seg_code, $start
 	unit:.byte 9,8,7,6,4,2,0
 	rtc:.ascii "00","/","00","/","00","-","00","-","00",":","00",":","00"
 start:
